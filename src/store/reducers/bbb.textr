import firebase from './config';
// import admin from 'firebase-admin';
import { YellowBox } from 'react-native';
class Fire {
   _token;
   _uid;
  constructor(token,uid) {
    this._token = token;
    this._uid = this.uid;
     this.observeAuth();
     console.log(firebase.database.ServerValue);
    YellowBox.ignoreWarnings(['Setting a timer']);
    YellowBox.ignoreWarnings(['ListView is deprecated']);
  }

  observeAuth = () =>
    firebase.auth().onAuthStateChanged(this.onAuthStateChanged);

  onAuthStateChanged = user => {
    if (!user) {
      try {
        firebase.auth().signInWithCustomToken(this._token)
        .catch(err => console.log('error' +err))
        .then((res) => console.log('sucess',res));
      } catch ({ message }) {
        alert(message);
      }
    }
  };

  get uid() {
    return (firebase.auth().currentUser || {}).uid;
  }

  get ref() {
    return firebase.database().ref('messages');
  }

  parse = (snapshot,key) => {
    console.log(snapshot)
    const { timestamp: numberStamp, text, user } = snapshot;
    const   _id  = key;
    const timestamp = new Date(numberStamp);
    const message = {
      _id,
      timestamp,
      text,
      user,
    };
    return message;
  };

  pasreMassges = parsedRes => {
    const massges= [];
    for (let key in parsedRes) {
      const msg = this.parse(parsedRes[key] ,key)
      massges.push({
        ...msg
      });
    }
    return massges;
  }

  // getMassegs() {
  //   return new Promise((resolve, reject) => {
  //   fetch(
  //     "https://appteach-7a364.firebaseio.com//messages.json?auth=" +
  //       this._token
  //   ).catch(() => {
  //     alert("No valid token found!");
  //   })
  //   .then(res => res.json())
  //   .then( parsed => resolve(this.pasreMassges(parsed)))
  //  });
  // }

  // on = callback =>
  //  new Promise((resolve, reject) => {
  //   fetch(
  //     "https://appteach-7a364.firebaseio.com//messages.json?auth=" +
  //       this._token
  //   ).catch(() => {
  //     alert("No valid token found!");
  //   })
  //   .then(res => res.json())
  //   .then( parsed => callback(this.pasreMassges(parsed)))
  //  });

  on = callback =>
    this.ref
      .limitToLast(20)
      .on('child_added', snapshot => callback(this.parse(snapshot)));

  get timestamp() {
    return firebase.database.ServerValue.TIMESTAMP;
  }
  // send the message to the Backend
  send = messages => {
    for (let i = 0; i < messages.length; i++) {
      const { text, user } = messages[i];
      const message = {
        text,
        user,
        timestamp: Date.now(),
      };
      this.append(message);
    }
  };

  append = message => fetch(
    "https://appteach-7a364.firebaseio.com//messages.json?auth=" +
    this._token,
    {
      method: "POST",
      body: JSON.stringify(message)
    }
  );

  // close the connection to the Backend
  off() {
    this.ref.off();
  }
}

export default Fire;
